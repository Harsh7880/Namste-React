Question 1) What is Emmet?
Answer : "Emmet" is a web development tool that helps developers write HTML and CSS code more quickly 
and efficiently through abbreviations and shortcuts. It allows for the rapid generation of HTML and CSS 
code snippets, making it easier to create complex web layouts with minimal typing.


Question 2) Difference between a Library and Framework ?
Answer: 

Library: A library is a collection of reusable code modules or functions that can be directly 
used by applications to extend their functionality. With a library, the control of the flow of the program
remains with the developer who uses the library. The developer decides when and where to call the library 
functions within their code. Libraries are generally more flexible and less invasive because they do not 
impose a specific structure or flow on the application. Examples of libraries include React (for building user 
interfaces), NumPy (for numerical computing in Python), and jQuery (for simplifying JavaScript DOM manipulation).

Framework: A framework is a pre-built architecture that provides a structure and set of rules for building 
applications. It often includes a collection of libraries and tools that work together to facilitate 
development within a specific domain. With a framework, the control of the flow of the program is inverted.
The framework dictates the overall structure of the application and controls the flow of execution.
Developers build their application by filling in or extending the framework's predefined components.
Examples of frameworks include Django (for building web applications in Python),
Ruby on Rails (for web development in Ruby), and Angular (for building web applications in TypeScript).

Question 3) What is CDN? Why do we use it?
Answer: CDN stands for Content Delivery Network. It is a network of distributed servers strategically
located across various geographical locations to deliver web content more efficiently to users.
CDN providers cache static content, such as images, stylesheets, JavaScript files, and videos, on these servers.
When a user requests content from a website, the CDN delivers it from the server closest to the user, 
reducing latency and improving website performance.

Here's why CDN is used:

1) Improved Website Performance: By serving content from servers closer to the user, CDN reduces latency
and accelerates the loading time of web pages. This results in a faster and smoother user experience, 
which is crucial for retaining visitors and improving SEO rankings.

2) Scalability: CDN helps websites handle spikes in traffic and scale resources more efficiently.
By distributing content across multiple servers, CDN providers can handle large volumes of simultaneous 
requests without overloading origin servers.

3) Global Reach: CDN servers are located in multiple regions worldwide, allowing websites to deliver content 
to users globally with minimal latency. This is particularly beneficial for websites with an international audience, 


Load Balancing: CDN providers often use load balancing techniques to distribute incoming traffic evenly across
multiple servers. 

Security: Many CDN providers offer security features such as DDoS protection, SSL/TLS encryption,
and web application firewalls to protect websites from cyber threats and vulnerabilities. 

Question 4) Why is React known as React?
Answer: React, the JavaScript library for building user interfaces, is known as "React" because of its 
core concept of reactive programming. The name "React" reflects its ability to react to changes in data 
and automatically update the user interface to reflect those changes without the need for manual intervention.

Question 5) What is crossorigin in script tag?
Answer: The crossorigin attribute in a <script> tag is used to specify how the browser should handle requests 
for cross-origin resources when loading JavaScript files. Cross-origin requests occur when a script hosted on 
one domain tries to fetch resources from a different domain.

Question 6) What is diference between React and ReactDOM ?
Answer: React and ReactDOM are two separate packages in the React ecosystem, each serving a distinct purpose:

React: React is the core library for building user interfaces in JavaScript. It provides a declarative,
component-based approach to building UIs, allowing developers to create reusable UI components and manage 
the state of their applications efficiently.

ReactDOM: ReactDOM is a package that provides DOM-specific methods that are required for React to interact
with the browser's DOM (Document Object Model). It acts as a bridge between React's virtual DOM and the actual 
DOM of the browser. ReactDOM includes methods for rendering React components to the DOM, updating the DOM in 
response to changes in component state or props, and handling events.

Question 7) What is difference between react.development.js and react.production.js files via CDN?
Answer: The difference between react.development.js and react.production.js files when served via CDN lies primarily in their optimization level and the additional development features included in the development version.

react.development.js:

This file is intended for use during development. It includes additional debugging information, warnings, and helpful error messages that assist developers in identifying issues in their React applications.
The development version of React is not optimized for performance. It may include additional checks, warnings, and development-specific features that aid in debugging but can impact runtime performance.
It is larger in file size compared to the production version because of the additional debugging information and development features included.

react.production.js:

This file is optimized for production use. It is stripped of development-specific features, warnings, and debugging information to minimize file size and improve runtime performance.
The production version of React is intended for deployment in production environments where performance and file size optimization are critical.
It is smaller in file size compared to the development version because it excludes development-specific features and debugging information.

Question 8) What is async and defer?

Answer : async and defer are attributes used in the <script> tag in HTML to control the loading
and execution of external JavaScript files. They are particularly useful when you want to optimize 
the loading of scripts to improve page performance.

async:
When you include the async attribute in a <script> tag, it tells the browser to load the script asynchronously 
while continuing to parse the HTML document. The script will be fetched asynchronously from the server without 
blocking the rendering of the page. Once the script is downloaded, it will execute immediately, potentially 
interrupting the rendering of the page. The order in which asynchronously loaded scripts execute is not guaranteed. 
Scripts may execute as soon as they are downloaded and are ready, regardless of the order in which they appear in the HTML document.
This attribute is useful for scripts that are not dependent on each other and can be executed independently.

defer:
When you include the defer attribute in a <script> tag, it tells the browser to defer the execution of 
the script until after the HTML document has been fully parsed and the DOMContentLoaded event has fired.
Deferred scripts will be fetched asynchronously like scripts with the async attribute, but they will not 
execute until the HTML parsing is complete. Deferred scripts will execute in the order they appear in 
the HTML document. This attribute is useful for scripts that need to access and manipulate the DOM, as 
it ensures that the DOM is fully loaded and ready for manipulation when the script executes.