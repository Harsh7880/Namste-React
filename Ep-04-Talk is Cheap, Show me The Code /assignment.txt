Question:  Is JSX mandatory for React?
Answer: No, JSX is not mandatory for JavaScript/React, JSX is a syantax extension for JavaScript
That allows you to write HTML Like code with in your JavaScript file , making it easier to write 
react component


Question: Is ES6 mandatory for React?
Answer: ES6 (ECMAScript 2015) features are not strictly mandatory for writing React code,
but they are highly recommended and widely used within the React community. Many of the 
features introduced in ES6, such as arrow functions, classes, destructuring assignment, 
template literals, and the spread operator, make React development more efficient and readable.

Question: {TitleComponent} vs {<TitleComponent/>} vs
{<TitleComponent></TitleComponent>} in JSX
Answer: these all works same at the end it's just a syantic sugar

Question: How can I write comments in JSX?
Answer: We can write comments in JSX, similar to we write in HTML, but in jSX there is a small
Difference in JSX we can not usew this '/**  **/' JavaScript syantax for writing comments as it will be trated as 
normal text in JSX instead we can use '{ }' and we can write similar commnets in {}.

Question: What is <React.Fragment></React.Fragment> and <></> ?
Answer: <React.Fragment> and <> </> (also known as the empty tag or shorthand syntax) are both used
in React to return multiple elements from a component without needing to wrap them in a single parent element.

Question: What is Virtual DOM?
Answer: The Virtual DOM is a concept used in React and other modern JavaScript frameworks to optimize 
the performance of rendering UI components. It's a lightweight, in-memory representation of the actual
DOM (Document Object Model) tree. react compares Virtual and Real dom and then only render component which got changed.

Question: What is Reconciliation in React?
Answer: 

Initial Rendering: When you create a React component and render it to the browser, React constructs a 
virtual representation of the DOM tree, known as the Virtual DOM. This Virtual DOM reflects the current state 
of your React components.

Updates and Reconciliation: When there are changes to the state or props of a component, React re-renders
the component and generates a new Virtual DOM representation.

Diffing Algorithm: React then compares the new Virtual DOM with the previous one to determine the minimal 
set of DOM operations required to update the actual browser DOM.

Efficient Updates: Once React has identified the differences (or "diffs"), it applies only the necessary
changes to the real DOM, minimizing the number of DOM manipulations required. This process is more efficient 
than directly updating the entire DOM tree.

Question: What is React Fiber?
Answer: React Fiber is an ongoing reimplementation of React's core algorithm. It is a complete rewrite of
the way React reconciles, schedules, and renders components. The primary goal of React Fiber is to improve 
the performance and responsiveness of React applications, especially in scenarios where there are frequent updates, 
complex component trees, or animations.

Here are some key points about React Fiber:

Incremental Rendering: One of the main features of React Fiber is its ability to perform work in incremental 
"units" or "fibers". This allows React to prioritize and schedule updates more efficiently, 
enabling smoother user interactions and better responsiveness.

Better Concurrency: React Fiber introduces the concept of prioritizing different types of work (such as rendering, 
layout, and event handling) based on their urgency and importance. This helps React to handle concurrent updates 
more effectively and ensures that high-priority tasks are processed quickly.

Improved Error Handling: Fiber includes improvements to error handling and error boundaries, making it easier to 
catch and handle errors that occur during rendering or component lifecycle methods.

Support for Suspense and Concurrent Mode: React Fiber lays the foundation for features like Suspense and Concurrent
Mode, which allow developers to build more responsive and interactive user interfaces with better support for 
asynchronous data loading, code splitting, and progressive rendering.

Question: Why we need keys in React? When do we need keys in React?
Answer: Keys in React are used to uniquely identify components or elements within an array.
They are important because they help React identify which items have changed, are added, or are removed. 
Keys assist React in efficiently updating the user interface when data changes.

Question: Can we use index as keys in React?
Answer: Yes, you can use the index as keys in React, but it's generally recommended to avoid it when possible, 
especially if your list items may change order or if they can be filtered or modified in other ways.

Dynamic Lists: If the list items can be reordered or filtered, using indexes as keys may cause React to
incorrectly re-render components. React relies on keys to identify which items have changed, and if the
keys change due to reordering, React may mistakenly re-render more components than necessary.


Question: What is props in React? Ways to
Answer: Props (short for properties) are a way of passing data from parent to child components in React. 
They are essentially immutable inputs to a React component. Props allow you to customize the behavior and
appearance of a component by providing values that can be accessed within the component.

Question: What is a Config Driven UI ?
Answer: A Config-Driven UI (User Interface) is an approach to building user interfaces where the configuration
or settings of the UI elements are externalized and driven by a configuration file or data structure. Instead of 
hardcoding UI components and their properties directly within the codebase, the UI is dynamically generated based 
on the configuration provided.

